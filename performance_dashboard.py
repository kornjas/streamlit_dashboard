import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from math import ceil
from datetime import datetime, timedelta
import re, html, json
from urllib.parse import urlencode
import hashlib

# ===== ENHANCED THEME & BRANDING =====
PRIMARY, SECONDARY, SUCCESS, DANGER = "#FABC3F", "#E85C0D", "#C7253E", "#821131"
BACKGROUND, CARD_BG = "#fffaf5", "#ffffff"
TEXT_PRIMARY, TEXT_SECONDARY = "#1e1e1e", "#5c5c5c"
ACCENT_BLUE, ACCENT_GREEN = "#3B82F6", "#10B981"
COFFEE_URL = "https://www.coffeeportals.com/"
PURCHASE_URL = "https://www.coffeeportals.com/how-to-purchase/"
COFFEE_LOGO = "https://coffeeportals.com/wp-content/uploads/2019/04/coffeeportals-1.png"
YOUTUBE_URL = "https://www.youtube.com/watch?v=aclyENOXMYU"

# ===== PAGE CONFIG WITH ENHANCED SEO =====
st.set_page_config(
    page_title="‚òïÔ∏è ‡πÄ‡∏à‡πä‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏© - Coffee Business ROI Calculator | Free Tool",
    page_icon="‚òïÔ∏è",
    layout="wide",
    initial_sidebar_state="collapsed",
    menu_items={
        'Get Help': 'https://coffeeportals.com/contact',
        'Report a bug': 'https://coffeeportals.com/support',
        'About': 'Free Coffee Business Calculator - Calculate ROI, Break-even, and Profitability'
    }
)

# ===== ENHANCED CSS WITH BETTER UX =====
st.markdown(f"""
<style>
  @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Kanit:wght@300;400;500;600;700&display=swap');

  html, body, [class*="css"] {{ 
    font-family: 'Kanit', 'Inter', sans-serif; 
  }}

  .stApp {{ 
    background: linear-gradient(135deg, {BACKGROUND} 0%, #fff8ef 100%);
    animation: fadeIn 0.8s ease-in;
  }}

  @keyframes fadeIn {{ from {{ opacity: 0; }} to {{ opacity: 1; }} }}

  .main .block-container {{ 
    padding-top: 1rem; 
    padding-bottom: 3rem; 
    max-width: 1400px;
    animation: slideUp 0.6s ease-out;
  }}

  @keyframes slideUp {{ from {{ transform: translateY(20px); opacity: 0; }} to {{ transform: translateY(0); opacity: 1; }} }}

  /* Enhanced Header with CTA */
  .hero-header {{
    background: linear-gradient(135deg, {PRIMARY} 0%, {SECONDARY} 50%, #C7253E 100%);
    color: #fff; 
    border-radius: 20px; 
    padding: 2rem 2.5rem; 
    margin-bottom: 2rem;
    box-shadow: 0 20px 40px rgba(232,92,13,.3);
    position: relative;
    overflow: hidden;
  }}

  .hero-header::before {{
    content: '';
    position: absolute;
    top: -50%;
    right: -20%;
    width: 200px;
    height: 200px;
    background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
    animation: float 6s ease-in-out infinite;
  }}

  @keyframes float {{ 0%, 100% {{ transform: translateY(0px); }} 50% {{ transform: translateY(-20px); }} }}

  .hero-content {{
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 2rem;
    position: relative;
    z-index: 2;
  }}

  .hero-text {{
    flex: 1;
  }}

  .hero-title {{ 
    font-size: 2.2rem; 
    font-weight: 800; 
    margin: 0 0 0.5rem 0;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
  }}

  .hero-subtitle {{ 
    font-size: 1.1rem; 
    opacity: 0.95; 
    margin-bottom: 1.5rem;
    line-height: 1.4;
  }}

  .cta-buttons {{
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }}

  .cta-btn {{
    padding: 0.8rem 1.5rem;
    border-radius: 50px;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s ease;
    border: 2px solid transparent;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
  }}

  .cta-primary {{
    background: rgba(255,255,255,0.2);
    color: #fff;
    border-color: rgba(255,255,255,0.3);
  }}

  .cta-primary:hover {{
    background: rgba(255,255,255,0.3);
    transform: translateY(-2px);
    box-shadow: 0 10px 20px rgba(0,0,0,0.2);
  }}

  .brand-section {{
    display: flex;
    align-items: center;
    gap: 1rem;
    background: rgba(255,255,255,0.15);
    padding: 1rem 1.5rem;
    border-radius: 15px;
    border: 1px solid rgba(255,255,255,0.2);
    backdrop-filter: blur(10px);
  }}

  .brand-section img {{ 
    height: 40px; 
    width: auto; 
    border-radius: 8px; 
    background: #fff; 
    padding: 4px;
  }}

  /* Enhanced Cards */
  .card {{ 
    background: {CARD_BG}; 
    border: 1px solid rgba(0,0,0,.08); 
    border-radius: 16px; 
    padding: 1.5rem; 
    box-shadow: 0 8px 32px rgba(0,0,0,.08);
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }}

  .card:hover {{
    transform: translateY(-4px);
    box-shadow: 0 12px 48px rgba(0,0,0,.12);
  }}

  .card::before {{
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, {PRIMARY}, {SECONDARY});
  }}

  /* Enhanced KPIs */
  .kpi {{ 
    background: {CARD_BG}; 
    border: 1px solid rgba(0,0,0,.06); 
    border-radius: 16px; 
    padding: 1.5rem;
    text-align: center;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }}

  .kpi:hover {{
    transform: translateY(-2px);
    box-shadow: 0 8px 24px rgba(0,0,0,.1);
  }}

  .kpi .label {{ 
    color: {TEXT_SECONDARY}; 
    font-size: 0.9rem; 
    margin-bottom: 0.5rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }}

  .kpi .val {{ 
    font-size: 1.8rem; 
    font-weight: 800; 
    color: {TEXT_PRIMARY};
    margin-bottom: 0.5rem;
  }}

  .kpi .change {{
    font-size: 0.8rem;
    padding: 0.2rem 0.5rem;
    border-radius: 20px;
    font-weight: 600;
  }}

  .positive {{ background: #dcfce7; color: #166534; }}
  .negative {{ background: #fef2f2; color: #dc2626; }}

  /* Enhanced Input Groups */
  .input-group {{
    background: {CARD_BG};
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 1rem;
    border: 1px solid rgba(0,0,0,.06);
  }}

  .section-title {{
    font-size: 1.1rem;
    font-weight: 700;
    color: {PRIMARY};
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }}

  /* Progress & Loading States */
  .progress-bar {{
    width: 100%;
    height: 6px;
    background: #f1f5f9;
    border-radius: 3px;
    overflow: hidden;
    margin: 1rem 0;
  }}

  .progress-fill {{
    height: 100%;
    background: linear-gradient(90deg, {PRIMARY}, {SECONDARY});
    border-radius: 3px;
    transition: width 0.8s ease;
  }}

  /* Social Proof Elements */
  .social-proof {{
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    border-radius: 12px;
    padding: 1rem 1.5rem;
    text-align: center;
    margin: 2rem 0;
  }}

  .testimonial {{
    font-style: italic;
    color: {TEXT_SECONDARY};
    margin-bottom: 0.5rem;
  }}

  .author {{
    font-weight: 600;
    color: {PRIMARY};
  }}

  /* Enhanced Tooltips */
  .tooltip-enhanced {{
    position: relative;
    display: inline-flex;
    align-items: center;
    gap: 0.3rem;
    cursor: help;
  }}

  .tooltip-icon {{
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: {PRIMARY};
    color: white;
    font-size: 0.7rem;
    font-weight: 700;
  }}

  /* Mobile Optimizations */
  @media (max-width: 768px) {{
    .hero-content {{ flex-direction: column; text-align: center; }}
    .hero-title {{ font-size: 1.8rem; }}
    .cta-buttons {{ justify-content: center; }}
    .kpi .val {{ font-size: 1.4rem; }}
  }}

  /* Hide Streamlit elements */
  #MainMenu {{visibility:hidden;}} 
  footer {{visibility:hidden;}} 
  header {{visibility:hidden;}}
  .stDeployButton {{display:none;}}
</style>
""", unsafe_allow_html=True)


# ===== ANALYTICS & TRACKING =====
def track_user_action(action, properties=None):
    """Simple analytics tracking - in production, integrate with Google Analytics, Mixpanel, etc."""
    if "analytics" not in st.session_state:
        st.session_state.analytics = []

    event = {
        "timestamp": datetime.now().isoformat(),
        "action": action,
        "properties": properties or {},
        "session_id": st.session_state.get("session_id", "unknown")
    }
    st.session_state.analytics.append(event)


# ===== SESSION MANAGEMENT =====
if "session_id" not in st.session_state:
    st.session_state.session_id = hashlib.md5(f"{datetime.now()}{np.random.random()}".encode()).hexdigest()[:8]
    track_user_action("session_start")

if "user_progress" not in st.session_state:
    st.session_state.user_progress = 0


# ===== LEAD CAPTURE MODAL =====
def show_lead_capture_modal():
    if st.session_state.get("show_lead_modal", False):
        with st.container():
            st.markdown("""
            <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); 
                        background: white; padding: 2rem; border-radius: 20px; 
                        box-shadow: 0 20px 80px rgba(0,0,0,0.3); z-index: 1000; max-width: 400px; width: 90vw;">
                <h3 style="text-align: center; color: #E85C0D;">üéâ ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡πâ‡∏ß!</h3>
                <p style="text-align: center;">‡∏£‡∏±‡∏ö PDF ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ü‡∏£‡∏µ + ‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï Excel</p>
            </div>
            """, unsafe_allow_html=True)

            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                email = st.text_input("üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•", placeholder="your@email.com")
                if st.button("‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ü‡∏£‡∏µ", type="primary", use_container_width=True):
                    if email:
                        track_user_action("lead_captured", {"email": email})
                        st.session_state.show_lead_modal = False
                        st.success("‚úÖ ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß! ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏•‡∏¢")
                        st.rerun()


# ===== ENHANCED HEADER WITH CTA =====
st.markdown(f"""
<div class="hero-header">
  <div class="hero-content">
    <div class="hero-text">
      <div class="hero-title">‚òïÔ∏è ‡πÄ‡∏à‡πä‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏© - Coffee ROI Calculator</div>
      <div class="hero-subtitle">
        ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á<br>
        <strong>‡∏•‡∏î‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô 15-25%</strong> ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô
      </div>
      <div class="cta-buttons">
        <a href="{PURCHASE_URL}" target="_blank" class="cta-btn cta-primary">
          üõí ‡∏î‡∏π‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°
        </a>
        <a href="#calculator" class="cta-btn cta-primary">
          üßÆ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ü‡∏£‡∏µ
        </a>
      </div>
    </div>
    <div class="brand-section">
      <img src="{COFFEE_LOGO}" alt="CoffeePortals"/>
      <div>
        <div style="font-weight: 700;">CoffeePortals.com</div>
        <div style="font-size: 0.85rem; opacity: 0.9;">‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡πÅ‡∏ü</div>
      </div>
    </div>
  </div>
</div>
""", unsafe_allow_html=True)

# ===== SOCIAL PROOF =====
st.markdown("""
<div class="social-proof">
  <div class="testimonial">"‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡πÑ‡∏£‡∏à‡∏£‡∏¥‡∏á ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ 3 ‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏•‡πâ‡∏ß!"</div>
  <div class="author">- ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ä‡∏≤‡∏¢, ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á Brew & Bean Coffee</div>
</div>
""", unsafe_allow_html=True)


# ===== UTILITY FUNCTIONS =====
def parse_money(s: str, default: float = 0.0) -> float:
    if s is None: return default
    s = str(s).strip()
    if s == "": return default
    neg = False
    if s.startswith("(") and s.endswith(")"):
        neg, s = True, s[1:-1]
    s = s.replace("‡∏ø", "").replace(",", "").replace(" ", "")
    if s.endswith("%"):
        try:
            v = float(s[:-1]) / 100.0
            return -v if neg else v
        except:
            return default
    try:
        v = float(re.sub(r"[^0-9.\-]", "", s))
        return -v if neg else v
    except:
        return default


def pct_to_float(txt: str, default=0.0) -> float:
    v = parse_money(txt, default)
    return v if v <= 1 else v / 100.0


def get_industry_benchmark(metric, value):
    """Return industry benchmark comparison"""
    benchmarks = {
        "gross_margin": {"excellent": 0.65, "good": 0.55, "average": 0.45},
        "payback_months": {"excellent": 12, "good": 18, "average": 24},
        "daily_sales": {"excellent": 200, "good": 150, "average": 100}
    }

    if metric in benchmarks:
        bench = benchmarks[metric]
        if metric == "payback_months":
            if value <= bench["excellent"]:
                return "üèÜ ‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°"
            elif value <= bench["good"]:
                return "‚úÖ ‡∏î‡∏µ"
            elif value <= bench["average"]:
                return "üî∂ ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
            else:
                return "‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"
        else:
            if value >= bench["excellent"]:
                return "üèÜ ‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°"
            elif value >= bench["good"]:
                return "‚úÖ ‡∏î‡∏µ"
            elif value >= bench["average"]:
                return "üî∂ ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
            else:
                return "‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"
    return "üìä ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢ÿ®"


# ===== DEFAULT VALUES & SESSION STATE =====
DEFAULTS = {
    "price": "75", "cups": "180", "days": "26",
    "cogs_thb": "28", "cogs_pct": "0", "pack": "2", "app_fee_pct": "0",
    "rent": "35000", "staff": "70000", "utils": "12000", "mkt": "8000", "others": "5000",
    "capex": "280000", "dep_years": "4", "tax_pct": "0"
}

FIELDS = ["price", "cups", "days", "cogs_thb", "cogs_pct", "pack", "app_fee_pct",
          "rent", "staff", "utils", "mkt", "others", "capex", "dep_years", "tax_pct"]

CASE_IDS = ["A", "B", "C"]

# ===== SESSION INITIALIZATION =====
if "cases" not in st.session_state:
    st.session_state.cases = {cid: DEFAULTS.copy() for cid in CASE_IDS}

if "active_case" not in st.session_state:
    st.session_state.active_case = "A"

# ===== ENHANCED INPUT SECTION =====
st.markdown('<div id="calculator"></div>', unsafe_allow_html=True)
st.markdown("## üßÆ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")

# Progress indicator
progress = min(100, st.session_state.user_progress)
st.markdown(f"""
<div class="progress-bar">
  <div class="progress-fill" style="width: {progress}%"></div>
</div>
<p style="text-align: center; color: {TEXT_SECONDARY}; font-size: 0.9rem;">
  ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: {progress}%
</p>
""", unsafe_allow_html=True)

# Enhanced tabs with icons
tab_icons = ["üè™", "üè¨", "üè¢"]
tabs = st.tabs([f"{tab_icons[i]} Case {cid} {'(‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)' if cid == 'A' else ''}" for i, cid in enumerate(CASE_IDS)])

# Quick actions
col1, col2, col3, col4 = st.columns([1, 1, 1, 2])
with col1:
    if st.button("üìã A ‚Üí B", help="‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• A ‡πÑ‡∏õ B"):
        st.session_state.cases["B"] = st.session_state.cases["A"].copy()
        track_user_action("copy_data", {"from": "A", "to": "B"})
        st.rerun()
with col2:
    if st.button("üìã B ‚Üí C", help="‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• B ‡πÑ‡∏õ C"):
        st.session_state.cases["C"] = st.session_state.cases["B"].copy()
        track_user_action("copy_data", {"from": "B", "to": "C"})
        st.rerun()
with col3:
    if st.button("üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï", help="‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"):
        st.session_state.cases = {cid: DEFAULTS.copy() for cid in CASE_IDS}
        track_user_action("reset_data")
        st.rerun()
with col4:
    st.session_state.active_case = st.radio(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
        CASE_IDS,
        horizontal=True,
        index=CASE_IDS.index(st.session_state.active_case),
        help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏™‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å"
    )


def enhanced_input_row(col1, col2, label, key_base, cid, default, help_text=""):
    with col1:
        value = st.text_input(
            f"{label}",
            value=st.session_state.cases[cid].get(key_base, default),
            key=f"{key_base}_{cid}",
            help=help_text,
            placeholder=f"‡πÄ‡∏ä‡πà‡∏ô {default}"
        )
        st.session_state.cases[cid][key_base] = value

        # Update progress
        if value and value != "0":
            st.session_state.user_progress = min(100, st.session_state.user_progress + 1)


# Enhanced input sections for each case
for i, cid in enumerate(CASE_IDS):
    with tabs[i]:
        with st.container():
            st.markdown(f'<div class="input-group">', unsafe_allow_html=True)
            st.markdown('<div class="section-title">üí∞ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢</div>', unsafe_allow_html=True)

            col1, col2, col3 = st.columns(3)
            enhanced_input_row(col1, col2, "‡∏£‡∏≤‡∏Ñ‡∏≤/‡πÅ‡∏Å‡πâ‡∏ß (‡∏ö‡∏≤‡∏ó)", "price", cid, DEFAULTS["price"],
                               "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏ß ‡πÄ‡∏ä‡πà‡∏ô 75, 85, 120")
            enhanced_input_row(col2, col3, "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡πÅ‡∏Å‡πâ‡∏ß/‡∏ß‡∏±‡∏ô)", "cups", cid, DEFAULTS["cups"],
                               "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡∏ß‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô")
            enhanced_input_row(col3, col1, "‡∏ß‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "days", cid, DEFAULTS["days"],
                               "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
            st.markdown('</div>', unsafe_allow_html=True)

            st.markdown(f'<div class="input-group">', unsafe_allow_html=True)
            st.markdown('<div class="section-title">üì¶ ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ú‡∏±‡∏ô‡πÅ‡∏õ‡∏£ (‡∏ï‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏ß)</div>', unsafe_allow_html=True)

            col1, col2, col3, col4 = st.columns(4)
            enhanced_input_row(col1, col2, "‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö/‡πÅ‡∏Å‡πâ‡∏ß (‡∏ö‡∏≤‡∏ó)", "cogs_thb", cid, DEFAULTS["cogs_thb"],
                               "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡πÅ‡∏ü ‡∏ô‡∏° ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• (‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤)")
            enhanced_input_row(col2, col3, "% ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö", "cogs_pct", cid, DEFAULTS["cogs_pct"],
                               "‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà‡πÄ‡∏õ‡πá‡∏ô % ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢ - ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á")
            enhanced_input_row(col3, col4, "‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå/‡πÅ‡∏Å‡πâ‡∏ß", "pack", cid, DEFAULTS["pack"],
                               "‡∏ñ‡πâ‡∏ß‡∏¢ ‡∏ù‡∏≤‡∏õ‡∏¥‡∏î ‡∏´‡∏•‡∏≠‡∏î ‡∏ñ‡∏∏‡∏á‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å")
            enhanced_input_row(col4, col1, "% ‡∏Ñ‡πà‡∏≤‡πÅ‡∏≠‡∏õ/‡πÄ‡∏î‡∏•‡∏¥‡πÄ‡∏ß‡∏≠‡∏£‡∏µ‡πà", "app_fee_pct", cid, DEFAULTS["app_fee_pct"],
                               "‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô Grab Food, Food Panda")
            st.markdown('</div>', unsafe_allow_html=True)

            st.markdown(f'<div class="input-group">', unsafe_allow_html=True)
            st.markdown('<div class="section-title">üè¢ ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏Ñ‡∏á‡∏ó‡∏µ‡πà (‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)</div>', unsafe_allow_html=True)

            col1, col2, col3 = st.columns(3)
            enhanced_input_row(col1, col2, "‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤", "rent", cid, DEFAULTS["rent"],
                               "‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏ô ‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á")
            enhanced_input_row(col2, col3, "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", "staff", cid, DEFAULTS["staff"],
                               "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô + ‡πÇ‡∏ö‡∏ô‡∏±‡∏™ + ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏°")
            enhanced_input_row(col3, col1, "‡∏Ñ‡πà‡∏≤‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏π‡∏õ‡πÇ‡∏†‡∏Ñ", "utils", cid, DEFAULTS["utils"],
                               "‡πÑ‡∏ü ‡∏ô‡πâ‡∏≥ ‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï")

            col1, col2 = st.columns(2)
            enhanced_input_row(col1, col2, "‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î", "mkt", cid, DEFAULTS["mkt"],
                               "‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤ Facebook, Google, ‡∏õ‡πâ‡∏≤‡∏¢‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤")
            enhanced_input_row(col2, col1, "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô", "others", cid, DEFAULTS["others"],
                               "‡∏Ñ‡πà‡∏≤‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î ‡∏Ñ‡πà‡∏≤‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏° ‡∏Ø‡∏•‡∏Ø")
            st.markdown('</div>', unsafe_allow_html=True)

            st.markdown(f'<div class="input-group">', unsafe_allow_html=True)
            st.markdown('<div class="section-title">üíº ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏©‡∏µ</div>', unsafe_allow_html=True)

            col1, col2, col3 = st.columns(3)
            enhanced_input_row(col1, col2, "‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô", "capex", cid, DEFAULTS["capex"],
                               "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ä‡∏á‡∏Å‡∏≤‡πÅ‡∏ü ‡∏ï‡∏π‡πâ‡πÅ‡∏ä‡πà ‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå ‡∏Ñ‡πà‡∏≤‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á")
            enhanced_input_row(col2, col3, "‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏õ‡∏µ)", "dep_years", cid, DEFAULTS["dep_years"],
                               "‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ")
            enhanced_input_row(col3, col1, "% ‡∏†‡∏≤‡∏©‡∏µ", "tax_pct", cid, DEFAULTS["tax_pct"],
                               "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)")
            st.markdown('</div>', unsafe_allow_html=True)


# ===== CORE CALCULATION ENGINE =====
def calc_case(vals: dict) -> dict:
    price = parse_money(vals["price"])
    cups_day = parse_money(vals["cups"])
    days = max(1, int(parse_money(vals["days"], 26)))

    cogs_thb = parse_money(vals["cogs_thb"])
    cogs_pct = pct_to_float(vals["cogs_pct"])
    pack = parse_money(vals["pack"])
    app_fee = pct_to_float(vals["app_fee_pct"])

    rent = parse_money(vals["rent"])
    staff = parse_money(vals["staff"])
    utils = parse_money(vals["utils"])
    mkt = parse_money(vals["mkt"])
    others = parse_money(vals["others"])

    capex = parse_money(vals["capex"])
    dep_years = max(1, int(parse_money(vals["dep_years"], 4)))
    tax_pct = pct_to_float(vals["tax_pct"])

    # Calculate variable costs
    base_cogs = cogs_thb if str(vals["cogs_thb"]).strip() != "" else price * cogs_pct
    var_cup = base_cogs + pack + (price * app_fee)
    contrib = price - var_cup

    # Monthly calculations
    cups_month = cups_day * days
    revenue = price * cups_month
    var_total = var_cup * cups_month
    gp = revenue - var_total
    fixed = rent + staff + utils + mkt + others
    op = gp - fixed
    tax = max(0.0, op) * tax_pct
    net = op - tax

    # Additional metrics
    depr = capex / (dep_years * 12)
    if contrib <= 0:
        bep_day = np.nan
    else:
        bep_day = fixed / contrib / days
    payback = (capex / net) if net > 0 else np.inf

    # Ratios and margins
    gp_margin = gp / revenue if revenue > 0 else 0
    net_margin = net / revenue if revenue > 0 else 0
    roi_annual = (net * 12) / capex if capex > 0 else 0

    return dict(
        price=price, cups_day=cups_day, days=days, revenue=revenue, var_total=var_total,
        gp=gp, fixed=fixed, op=op, tax=tax, net=net, contrib=contrib, bep_day=bep_day,
        payback=payback, var_cup=var_cup, depr=depr, gp_margin=gp_margin,
        net_margin=net_margin, roi_annual=roi_annual
    )


# Calculate all cases
results = {cid: calc_case(st.session_state.cases[cid]) for cid in CASE_IDS}

# Track calculation completion
track_user_action("calculation_completed", {
    "cases": len([r for r in results.values() if r["revenue"] > 0])
})

# ===== ENHANCED KPI DASHBOARD =====
st.markdown("---")

# ===== COST COMPARISON SECTION (‡πÉ‡∏´‡∏°‡πà) =====
st.markdown("## üí∞ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö")
st.markdown(f"""
<div style="background: linear-gradient(135deg, #fff8f0 0%, #fff0e6 100%); border-radius: 16px; padding: 1.5rem; margin-bottom: 2rem; border: 1px solid {PRIMARY};">
  <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 1rem; text-align: center;">
    <div>
      <div style="font-size: 0.9rem; color: {TEXT_SECONDARY}; margin-bottom: 0.5rem;">‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡πâ‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î</div>
      <div style="font-size: 1.5rem; font-weight: 700; color: #dc2626;">‡∏ø35-45</div>
      <div style="font-size: 0.8rem; color: {TEXT_SECONDARY};">‡∏ï‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏ß</div>
    </div>
    <div style="border-left: 1px solid #e5e5e5; border-right: 1px solid #e5e5e5;">
      <div style="font-size: 0.9rem; color: {TEXT_SECONDARY}; margin-bottom: 0.5rem;">CoffeePortals Premium</div>
      <div style="font-size: 1.5rem; font-weight: 700; color: {SUCCESS};">‡∏ø22-28</div>
      <div style="font-size: 0.8rem; color: {SUCCESS}; font-weight: 600;">‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î 25-35%</div>
    </div>
    <div>
      <div style="font-size: 0.9rem; color: {TEXT_SECONDARY}; margin-bottom: 0.5rem;">‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô</div>
      <div style="font-size: 1.5rem; font-weight: 700; color: {PRIMARY};">+‡∏ø15-20</div>
      <div style="font-size: 0.8rem; color: {PRIMARY};">‡∏ï‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏ß</div>
    </div>
  </div>
  <div style="text-align: center; margin-top: 1.5rem;">
    <a href="{PURCHASE_URL}" target="_blank" style="background: {PRIMARY}; color: white; padding: 0.8rem 2rem; border-radius: 25px; text-decoration: none; font-weight: 700; display: inline-block;">
      üõí ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°
    </a>
  </div>
</div>
""", unsafe_allow_html=True)

st.markdown("## üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö A/B/C)")

# Main KPIs
kpi_cols = st.columns(4)
kpi_metrics = [
    ("revenue", "üí∞ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "‡∏ö‡∏≤‡∏ó"),
    ("net", "üíé ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥", "‡∏ö‡∏≤‡∏ó"),
    ("gp_margin", "üìà ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πâ‡∏ô", "%"),
    ("payback", "‚è∞ Payback", "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
]

for i, (metric, title, unit) in enumerate(kpi_metrics):
    with kpi_cols[i]:
        st.markdown('<div class="kpi">', unsafe_allow_html=True)
        st.markdown(f'<div class="label">{title}</div>', unsafe_allow_html=True)

        for cid in CASE_IDS:
            val = results[cid][metric]
            if metric == "payback":
                val_str = f"{val:.1f}" if val != np.inf else "‚àû"
                benchmark = get_industry_benchmark("payback_months", val)
            elif metric == "gp_margin":
                val_str = f"{val * 100:.1f}%"
                benchmark = get_industry_benchmark("gross_margin", val)
            else:
                val_str = f"‡∏ø{val:,.0f}"
                benchmark = ""

            st.markdown(
                f'<div class="val">{val_str} <span style="font-size:0.7rem;color:{TEXT_SECONDARY};">({cid})</span></div>',
                unsafe_allow_html=True)
            if benchmark:
                st.markdown(f'<div style="font-size:0.7rem;margin-bottom:0.5rem;">{benchmark}</div>',
                            unsafe_allow_html=True)

        st.markdown('</div>', unsafe_allow_html=True)

# ===== DETAILED ANALYSIS FOR ACTIVE CASE =====
active = st.session_state.active_case
R = results[active]

st.markdown("---")
st.markdown(f"## üéØ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å - Case {active}")

# Enhanced metrics row
met_cols = st.columns(3)
with met_cols[0]:
    bep_status = "‚úÖ ‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏∏‡∏î‡∏Ñ‡∏∏‡πâ‡∏°‡∏ó‡∏∏‡∏ô" if R["cups_day"] >= R["bep_day"] else "‚ö†Ô∏è ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∏‡∏î‡∏Ñ‡∏∏‡πâ‡∏°‡∏ó‡∏∏‡∏ô"
    st.metric(
        "‡∏à‡∏∏‡∏î‡∏Ñ‡∏∏‡πâ‡∏°‡∏ó‡∏∏‡∏ô vs ‡∏¢‡∏≠‡∏î‡∏à‡∏£‡∏¥‡∏á",
        f"{ceil(R['bep_day']) if np.isfinite(R['bep_day']) else 'N/A'} ‡πÅ‡∏Å‡πâ‡∏ß/‡∏ß‡∏±‡∏ô",
        f"{R['cups_day'] - R['bep_day']:.0f} ‡πÅ‡∏Å‡πâ‡∏ß" if np.isfinite(R['bep_day']) else "N/A",
        help=bep_status
    )

with met_cols[1]:
    roi_color = "normal" if R["roi_annual"] > 0.15 else "inverse"
    st.metric(
        "ROI ‡∏ï‡πà‡∏≠‡∏õ‡∏µ",
        f"{R['roi_annual'] * 100:.1f}%",
        "‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°" if R["roi_annual"] > 0.3 else ("‡∏î‡∏µ" if R["roi_annual"] > 0.15 else "‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"),
        delta_color=roi_color
    )

with met_cols[2]:
    margin_color = "normal" if R["net_margin"] > 0.1 else "inverse"
    st.metric(
        "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥",
        f"{R['net_margin'] * 100:.1f}%",
        get_industry_benchmark("gross_margin", R["gp_margin"]),
        delta_color=margin_color
    )

# Enhanced Visualizations
viz_col1, viz_col2 = st.columns(2)

with viz_col1:
    # Interactive Break-even Gauge
    val = R["cups_day"]
    tgt = float(R["bep_day"]) if np.isfinite(R["bep_day"]) else 0
    max_range = max(1.0, val * 1.5, tgt * 1.5)

    fig_gauge = go.Figure(go.Indicator(
        mode="gauge+number+delta",
        value=val,
        domain={'x': [0, 1], 'y': [0, 1]},
        title={'text': "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ vs ‡∏à‡∏∏‡∏î‡∏Ñ‡∏∏‡πâ‡∏°‡∏ó‡∏∏‡∏ô (‡πÅ‡∏Å‡πâ‡∏ß/‡∏ß‡∏±‡∏ô)", 'font': {'size': 16}},
        delta={'reference': tgt, 'increasing': {'color': SUCCESS}, 'decreasing': {'color': DANGER}},
        gauge={
            'axis': {'range': [None, max_range], 'tickwidth': 1, 'tickcolor': TEXT_SECONDARY},
            'bar': {'color': SECONDARY, 'thickness': 0.7},
            'steps': [
                {'range': [0, tgt], 'color': '#ffecec'},
                {'range': [tgt, max_range], 'color': '#ecffec'}
            ],
            'threshold': {
                'line': {'color': DANGER, 'width': 4},
                'thickness': 0.75,
                'value': tgt
            }
        }
    ))

    fig_gauge.update_layout(
        height=350,
        margin=dict(l=20, r=20, t=40, b=20),
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)'
    )
    st.plotly_chart(fig_gauge, use_container_width=True)

with viz_col2:
    # Enhanced Waterfall Chart
    categories = ["‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ", "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ú‡∏±‡∏ô‡πÅ‡∏õ‡∏£", "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏Ñ‡∏á‡∏ó‡∏µ‡πà", "‡∏Å‡∏≥‡πÑ‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ", "‡∏†‡∏≤‡∏©‡∏µ", "‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥"]
    values = [R["revenue"], -R["var_total"], -R["fixed"], 0, -R["tax"], 0]
    measures = ["relative", "relative", "relative", "total", "relative", "total"]

    fig_waterfall = go.Figure(go.Waterfall(
        name="20", orientation="v",
        measure=measures,
        x=categories,
        textposition="outside",
        text=[f"‡∏ø{v:,.0f}" if v != 0 else f"‡∏ø{R['op']:,.0f}" if i == 3 else f"‡∏ø{R['net']:,.0f}" for i, v in
              enumerate(values)],
        y=values,
        connector={"line": {"color": TEXT_SECONDARY}},
        increasing={"marker": {"color": PRIMARY}},
        decreasing={"marker": {"color": DANGER}},
        totals={"marker": {"color": SECONDARY}}
    ))

    fig_waterfall.update_layout(
        title="‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡πÑ‡∏£",
        height=350,
        margin=dict(l=20, r=20, t=40, b=60),
        paper_bgcolor='rgba(0,0,0,0)',
        xaxis_tickangle=-45
    )
    st.plotly_chart(fig_waterfall, use_container_width=True)

# ===== SCENARIO ANALYSIS =====
st.markdown("### üìà ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á")

scenario_col1, scenario_col2 = st.columns(2)

with scenario_col1:
    st.markdown("**üéØ Sensitivity Analysis: ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ vs ‡∏Å‡∏≥‡πÑ‡∏£**")

    range_input = st.text_input(
        "‡∏ä‡πà‡∏ß‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡πÅ‡∏Å‡πâ‡∏ß/‡∏ß‡∏±‡∏ô)",
        "50-400",
        help="‡πÄ‡∏ä‡πà‡∏ô 50-400 ‡∏´‡∏£‡∏∑‡∏≠ 100,200,300"
    )

    # Parse range
    if "-" in range_input:
        try:
            lo, hi = map(int, range_input.split("-"))
            test_range = np.linspace(lo, hi, 20)
        except:
            test_range = np.linspace(50, 400, 20)
    else:
        try:
            test_range = [int(x.strip()) for x in range_input.split(",")]
        except:
            test_range = np.linspace(50, 400, 20)

    # Calculate scenarios
    scenario_profits = []
    for cups in test_range:
        temp_case = st.session_state.cases[active].copy()
        temp_case["cups"] = str(cups)
        temp_result = calc_case(temp_case)
        scenario_profits.append(temp_result["net"])

    scenario_df = pd.DataFrame({
        "cups_per_day": test_range,
        "net_profit": scenario_profits
    })

    fig_scenario = px.line(
        scenario_df,
        x="cups_per_day",
        y="net_profit",
        markers=True,
        title="‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô"
    )

    fig_scenario.add_hline(y=0, line_dash="dash", line_color="gray", annotation_text="‡∏à‡∏∏‡∏î‡∏Ñ‡∏∏‡πâ‡∏°‡∏ó‡∏∏‡∏ô")
    fig_scenario.add_vline(x=R["cups_day"], line_dash="dot", line_color=SECONDARY, annotation_text="‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")

    fig_scenario.update_traces(line=dict(width=3, color=PRIMARY))
    fig_scenario.update_layout(
        height=300,
        margin=dict(l=20, r=20, t=40, b=20),
        paper_bgcolor='rgba(0,0,0,0)'
    )
    st.plotly_chart(fig_scenario, use_container_width=True)

with scenario_col2:
    st.markdown("**üè™ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏Ñ‡∏á‡∏ó‡∏µ‡πà**")

    # Cost breakdown pie chart
    cost_categories = ["‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤", "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", "‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏π‡∏õ‡πÇ‡∏†‡∏Ñ", "‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"]
    cost_values = [
        parse_money(st.session_state.cases[active]["rent"]),
        parse_money(st.session_state.cases[active]["staff"]),
        parse_money(st.session_state.cases[active]["utils"]),
        parse_money(st.session_state.cases[active]["mkt"]),
        parse_money(st.session_state.cases[active]["others"])
    ]

    fig_costs = px.pie(
        values=cost_values,
        names=cost_categories,
        title="‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏Ñ‡∏á‡∏ó‡∏µ‡πà",
        hole=0.4,
        color_discrete_sequence=[PRIMARY, SECONDARY, ACCENT_BLUE, SUCCESS, DANGER]
    )

    fig_costs.update_traces(textposition='inside', textinfo='percent+label')
    fig_costs.update_layout(
        height=300,
        margin=dict(l=20, r=20, t=40, b=20),
        paper_bgcolor='rgba(0,0,0,0)'
    )
    st.plotly_chart(fig_costs, use_container_width=True)

# ===== ENHANCED INSIGHTS & RECOMMENDATIONS =====
st.markdown("---")
st.markdown("## üß† AI Insights & ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")

insights_col1, insights_col2 = st.columns(2)

with insights_col1:
    st.markdown("### üìã ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")

    insights = []
    warnings = []
    recommendations = []

    # Profitability Analysis
    if R["net"] > 0:
        insights.append(f"‚úÖ **‡∏Å‡∏≥‡πÑ‡∏£‡πÑ‡∏î‡πâ** ‡∏ø{R['net']:,.0f}/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ({R['net_margin'] * 100:.1f}%)")
    else:
        warnings.append(f"‚ö†Ô∏è **‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô** ‡∏ø{abs(R['net']):,.0f}/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
        recommendations.append("üéØ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏î‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô")

    # Break-even Analysis
    if np.isfinite(R["bep_day"]):
        if R["cups_day"] >= R["bep_day"]:
            insights.append(f"‚úÖ **‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏∏‡∏î‡∏Ñ‡∏∏‡πâ‡∏°‡∏ó‡∏∏‡∏ô** {R['cups_day'] - R['bep_day']:.0f} ‡πÅ‡∏Å‡πâ‡∏ß/‡∏ß‡∏±‡∏ô")
        else:
            warnings.append(f"‚ö†Ô∏è **‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∏‡∏î‡∏Ñ‡∏∏‡πâ‡∏°‡∏ó‡∏∏‡∏ô** {R['bep_day'] - R['cups_day']:.0f} ‡πÅ‡∏Å‡πâ‡∏ß/‡∏ß‡∏±‡∏ô")
            recommendations.append(f"üéØ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≠‡∏î‡πÉ‡∏´‡πâ‡∏ñ‡∏∂‡∏á {ceil(R['bep_day'])} ‡πÅ‡∏Å‡πâ‡∏ß/‡∏ß‡∏±‡∏ô")

    # Margin Analysis
    if R["gp_margin"] < 0.5:
        warnings.append(f"‚ö†Ô∏è **‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏ï‡πà‡∏≥** {R['gp_margin'] * 100:.1f}%")
        recommendations.append("üéØ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏° ‚Üí ‡∏•‡∏î‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô 25%")
    elif R["gp_margin"] > 0.65:
        insights.append(f"‚úÖ **‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡∏µ** {R['gp_margin'] * 100:.1f}%")

    # Payback Analysis
    if R["payback"] != np.inf:
        if R["payback"] <= 18:
            insights.append(f"‚úÖ **‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏£‡πá‡∏ß** {R['payback']:.1f} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
        elif R["payback"] <= 36:
            insights.append(f"üî∂ **‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏∏‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á** {R['payback']:.1f} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
        else:
            warnings.append(f"‚ö†Ô∏è **‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏∏‡∏ô‡∏ä‡πâ‡∏≤** {R['payback']:.1f} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
            recommendations.append("üéØ ‡∏•‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≥‡πÑ‡∏£")

    # Display insights
    for insight in insights:
        st.success(insight)

    for warning in warnings:
        st.warning(warning)

with insights_col2:
    st.markdown("### üöÄ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á")

    for rec in recommendations:
        st.info(rec)

    # Additional strategic recommendations
    if R["revenue"] > 0:
        # Cost optimization with premium ingredients
        current_cogs = parse_money(st.session_state.cases[active]["cogs_thb"])
        if current_cogs > 25:
            potential_savings = (current_cogs - 22) * R["cups_day"] * R["days"]
            st.info(f"üí∞ **‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°** ‚Üí ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î ‡∏ø{potential_savings:,.0f}/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")

        # Revenue optimization
        if R["contrib"] < 35:
            st.info("üåü **‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á** ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏î‡πâ 10-15% ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏¢‡∏≠‡∏°‡∏à‡πà‡∏≤‡∏¢")

        # Product mix
        if R["gp_margin"] < 0.6:
            st.info("‚òï **‡πÄ‡∏°‡∏ô‡∏π‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°** ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≥‡πÑ‡∏£‡∏ï‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏ß")

    # CTA for premium ingredients
    st.markdown(f"""
    <div style="background: {PRIMARY}; color: white; padding: 1rem; border-radius: 12px; text-align: center; margin-top: 1rem;">
        <div style="font-weight: 700; margin-bottom: 0.5rem;">üéØ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û?</div>
        <a href="{PURCHASE_URL}" target="_blank" style="color: white; background: rgba(255,255,255,0.2); padding: 0.5rem 1rem; border-radius: 20px; text-decoration: none; font-weight: 600;">
            ‡∏î‡∏π‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏° ‚Üí
        </a>
    </div>
    """, unsafe_allow_html=True)

# ===== PRODUCT SHOWCASE =====
st.markdown("---")
st.markdown("## üåü ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏° - CoffeePortals")

showcase_cols = st.columns(3)
products = [
    {
        "name": "‡πÄ‡∏°‡∏•‡πá‡∏î‡∏Å‡∏≤‡πÅ‡∏ü‡∏Ñ‡∏±‡πà‡∏ß‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°",
        "price": "450-680 ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏Å",
        "saving": "‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î 25%",
        "desc": "‡∏Ñ‡∏±‡πà‡∏ß‡∏™‡∏î ‡∏™‡πà‡∏á‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô"
    },
    {
        "name": "‡∏ô‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏Å‡∏≤‡πÅ‡∏ü",
        "price": "45-65 ‡∏ö‡∏≤‡∏ó/‡∏•‡∏¥‡∏ï‡∏£",
        "saving": "‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î 20%",
        "desc": "‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û UHT ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤"
    },
    {
        "name": "‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏£‡∏ö",
        "price": "8,500-12,000 ‡∏ö‡∏≤‡∏ó",
        "saving": "‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î 30%",
        "desc": "‡∏ä‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà"
    }
]

for i, product in enumerate(products):
    with showcase_cols[i]:
        st.markdown(f"""
        <div style="background: white; border: 1px solid #e5e5e5; border-radius: 12px; padding: 1rem; text-align: center; height: 200px; display: flex; flex-direction: column; justify-content: space-between;">
            <div>
                <h4 style="color: {PRIMARY}; margin-bottom: 0.5rem;">{product['name']}</h4>
                <div style="font-size: 1.1rem; font-weight: 700; margin-bottom: 0.5rem;">{product['price']}</div>
                <div style="color: {SUCCESS}; font-weight: 600; font-size: 0.9rem; margin-bottom: 0.5rem;">{product['saving']}</div>
                <div style="color: {TEXT_SECONDARY}; font-size: 0.85rem;">{product['desc']}</div>
            </div>
        </div>
        """, unsafe_allow_html=True)

st.markdown(f"""
<div style="text-align: center; margin: 2rem 0;">
    <a href="{PURCHASE_URL}" target="_blank" style="background: {PRIMARY}; color: white; padding: 1rem 2rem; border-radius: 25px; text-decoration: none; font-weight: 700; font-size: 1.1rem; display: inline-block;">
        üõí ‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    </a>
    <div style="margin-top: 0.5rem; font-size: 0.9rem; color: {TEXT_SECONDARY};">
        üöö ‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ! ‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 3,000 ‡∏ö‡∏≤‡∏ó | üìû ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ü‡∏£‡∏µ ‡πÇ‡∏ó‡∏£ 02-xxx-xxxx
    </div>
</div>
""", unsafe_allow_html=True)

# ===== PRODUCT SALES FUNNEL =====
if R["net"] > 0 and not st.session_state.get("product_viewed", False):
    st.markdown("---")

    # Calculate potential savings
    current_cogs = parse_money(st.session_state.cases[active]["cogs_thb"])
    premium_cogs = 25  # Our premium ingredient cost
    monthly_savings = max(0, (current_cogs - premium_cogs) * R["cups_day"] * R["days"])

    if monthly_savings > 1000:  # Show offer if significant savings
        st.markdown(f"""
        <div style="background: linear-gradient(135deg, {SUCCESS} 0%, {PRIMARY} 100%); 
                    color: white; border-radius: 20px; padding: 2rem; text-align: center; margin: 2rem 0;">
            <h3 style="margin-bottom: 1rem;">üéâ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÑ‡∏î‡πâ!</h3>
            <div style="font-size: 1.2rem; margin-bottom: 1rem;">
                <strong>‡∏ø{monthly_savings:,.0f}/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</strong> ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°
            </div>
            <div style="margin-bottom: 1.5rem; opacity: 0.9;">
                ‚Ä¢ ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤<br>
                ‚Ä¢ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏•‡∏≤‡∏á<br>
                ‚Ä¢ ‡∏™‡πà‡∏á‡∏ï‡∏£‡∏á‡∏ñ‡∏∂‡∏á‡∏£‡πâ‡∏≤‡∏ô ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏ö‡∏à‡∏ö
            </div>
        </div>
        """, unsafe_allow_html=True)

        col1, col2 = st.columns(2)
        with col1:
            if st.button("üõí ‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤", type="primary", use_container_width=True):
                track_user_action("product_interest", {"potential_savings": monthly_savings})
                st.session_state.product_viewed = True
                # Redirect to purchase page
                st.markdown(f'<meta http-equiv="refresh" content="0;url={PURCHASE_URL}">', unsafe_allow_html=True)
                st.success("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠...")

    else:
        st.info(f"üí° ‡∏î‡∏π‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°‡∏ó‡∏µ‡πà [CoffeePortals.com]({PURCHASE_URL}) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏•‡∏î‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô")

# ===== EXPORT & PRODUCT CATALOG =====
st.markdown("---")
st.markdown("### üì§ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏Ñ‡∏ï‡∏ï‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")

export_col1, export_col2, export_col3 = st.columns(3)

# ===== FOOTER WITH SOCIAL PROOF =====
st.markdown("---")

footer_col1, footer_col2, footer_col3 = st.columns(3)

with footer_col1:
    st.markdown(f"""
    **üõí ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤**
    - üåê [‡∏î‡∏π‡πÅ‡∏Ñ‡∏ï‡∏ï‡∏≤‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏ï‡πá‡∏°]({PURCHASE_URL})
    - üìû ‡πÑ‡∏•‡∏ô‡πå‡πÑ‡∏≠‡∏î‡∏µ: rathnagorn
    - üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πå Coffeeportals@gmail.com
    """)

with footer_col2:
    st.markdown("""
    **‚òï ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°**
    - ‚úÖ ‡πÄ‡∏°‡∏•‡πá‡∏î‡∏Å‡∏≤‡πÅ‡∏ü‡∏Ñ‡∏±‡πà‡∏ß‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°
    - ‚úÖ ‡πÑ‡∏ã‡∏£‡∏±‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏Å‡∏≤‡πÅ‡∏ü
    - ‚úÖ ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ã‡πá‡∏ï
    """)

with footer_col3:
    st.markdown(f"""
    **üìö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°**
    - üì∫ [‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥]({YOUTUBE_URL})
    - üìä ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì (‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ)
    """)

st.markdown(f"""
<div style="text-align: center; padding: 2rem 0; color: {TEXT_SECONDARY}; border-top: 1px solid #e2e8f0; margin-top: 2rem;">
    <div style="font-size: 0.9rem; margin-bottom: 0.5rem;">
        Made with ‚ù§Ô∏è by <a href="{COFFEE_URL}" target="_blank" style="color: {PRIMARY}; font-weight: 600;">CoffeePortals Team</a>
    </div>
    <div style="font-size: 0.8rem;">
        Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M')} | Version 1.0 Started
    </div>
</div>
""", unsafe_allow_html=True)